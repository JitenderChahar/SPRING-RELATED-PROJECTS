/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.3.8.v20160314
 * Generated at: 2016-07-02 12:32:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<h1>index</h1>\n");
      out.write("<a href=\"facebook/index.html\">Protected url by Facebook: facebook/index.html</a> (use a real account)<br />\n");
      out.write("<a href=\"facebook/notprotected.html\">Not protected page: facebook/notprotected.html</a> (no authentication required)<br />\n");
      out.write("<a href=\"facebookadmin/index.html\">Protected url by Facebook with ROLE_ADMIN: facebookadmin/index.html</a> (use a real account)<br />\n");
      out.write("<a href=\"facebookcustom/index.html\">Protected url by Facebook with custom authorizer (= must be a <em>CommonProfile</em> where the username starts with \"jle\"): facebookcustom/index.html</a> (login with form or basic authentication before with jle* username)<br />\n");
      out.write("<a href=\"twitter/index.html\">Protected url by Twitter: twitter/index.html</a> or <a href=\"twitter/index.html?client_name=FacebookClient\">by Facebook: twitter/index.html?client_name=FacebookClient</a> (use a real account)<br />\n");
      out.write("<a href=\"form/index.html\">Protected url by form authentication: form/index.html</a> (use login = pwd)<br />\n");
      out.write("<a href=\"basicauth/index.html\">Protected url by indirect basic auth: basicauth/index.html</a> (use login = pwd)<br />\n");
      out.write("<a href=\"cas/index.html\">Protected url by CAS: cas/index.html</a> (use login = pwd)<br />\n");
      out.write("<a href=\"saml/index.html\">Protected url by SAML2: saml/index.html</a> (use testpac4j at gmail.com / Pac4jtest)<br />\n");
      out.write("<a href=\"oidc/index.html\">Protected url by Google OpenID Connect: oidc/index.html</a> (use a real account)<br />\n");
      out.write("<a href=\"protected/index.html\">Protected url: protected/index.html</a> (won't start any login process)<br />\n");
      out.write("<br />\n");
      out.write("<a href=\"jwt.html\">Generate a JWT token</a> (after being authenticated)<br />\n");
      out.write("<a href=\"/dba/index.html\">Protected url by DirectBasicAuthClient: /dba/index.html</a> (POST the <em>Authorization</em> header with value: <em>Basic amxlbGV1OmpsZWxldQ==</em>) then by <a href=\"/dba/index.html\">ParameterClient: /dba/index.html</a> (with request parameter: token=<em>jwt_generated_token</em>)<br />\n");
      out.write("<a href=\"/rest-jwt/index.html\">Protected url by ParameterClient: /rest-jwt/index.html</a> (with request parameter: token=<em>jwt_generated_token</em>)<br />\n");
      out.write("<a href=\"/casrest/index.html\">Protected url by CasRestBasicAuthClient: /casrest/index.html</a> (use login = pwd)<br />\n");
      out.write("<br />\n");
      out.write("<a href=\"forceLogin?client_name=FacebookClient\">Force Facebook login</a> (even if already authenticated)<br />\n");
      out.write("<br />\n");
      out.write("<a href=\"logout?url=/?forcepostlogouturl\">logout</a>\n");
      out.write("<br /><br />\n");
      out.write("profiles: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${profiles}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
